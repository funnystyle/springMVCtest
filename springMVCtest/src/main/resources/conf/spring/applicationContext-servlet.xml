<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" /> <!-- for images -->
	<resources mapping="/lib/**" location="/lib/" /> <!-- for js, css -->

	<!-- Configure the multipart resolver -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<beans:property name="maxUploadSize" value="100000000" />
	</beans:bean>
	
	<!-- bind your message.properties -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<beans:value>classpath:conf/message/validation-message</beans:value>
				<beans:value>classpath:conf/message/error-message</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="messageSourceAccessor" class="org.springframework.context.support.MessageSourceAccessor">
		<beans:constructor-arg>
			<beans:ref local="messageSource" />
		</beans:constructor-arg>
	</beans:bean>
		
	
	<!-- apache tiles -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>classpath:conf/tiles/tilesdef.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- For RESTful -->
	<beans:bean	class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<beans:property name="order" value="1" />
		<beans:property name="mediaTypes">
			<beans:map>
				<beans:entry key="json" value="application/json" />
			</beans:map>
		</beans:property>
		<beans:property name="defaultViews">
			<beans:list>
				<!-- Json View -->
				<beans:bean id="jsonView"
					class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
					<beans:property name="contentType"
						value="application/json;charset=UTF-8" />
				</beans:bean>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- tiles -->
	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="order" value="2" />
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</beans:bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean	class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="order" value="3" />
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan base-package="kr.co.springMVCtest" />

</beans:beans>
